{"version":3,"sources":["webpack:///src/app/core/http/api-prefix.interceptor.ts","webpack:///src/app/shared/header/header.component.ts","webpack:///src/app/shared/header/header.component.html","webpack:///src/app/feature/twitter/component/user-post/user-post.component.ts","webpack:///src/app/feature/twitter/component/user-post/user-post.component.html","webpack:///src/app/shared/services/common.service.ts","webpack:///src/app/feature/twitter/service/twitter.service.ts","webpack:///src/environments/environment.ts","webpack:///src/app/feature/twitter/component/user-profile/user-profile.component.html","webpack:///src/app/feature/twitter/component/user-profile/user-profile.component.ts","webpack:///src/app/feature/twitter/service/index.ts","webpack:///src/app/core/http/error-handler.interceptor.ts","webpack:///src/app/shared/shared.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/feature/feature.module.ts","webpack:///src/app/shared/landing/landing.component.ts","webpack:///src/app/shared/landing/landing.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/feature/twitter/component/main/main.component.html","webpack:///src/app/feature/twitter/component/main/main.component.ts","webpack:///src/app/core/http/http-request.service.ts","webpack:///src/app/core/logger.service.ts","webpack:///src/app/shared/leftpane/leftpane.component.ts","webpack:///src/app/shared/leftpane/leftpane.component.html","webpack:///src/app/feature/twitter/component/user-feed/user-feed.component.html","webpack:///src/app/feature/twitter/component/user-feed/user-feed.component.ts","webpack:///src/app/shared/loader/loader.component.html","webpack:///src/app/shared/loader/loader.component.ts","webpack:///src/app/core/core.module.ts","webpack:///src/app/feature/feature-routing.module.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/app/feature/twitter/component/index.ts","webpack:///src/app/shared/loader/service/loader.service.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/core/route-reusable-strategy.ts"],"names":["ApiPrefixInterceptor","request","next","test","url","clone","serverUrl","handle","HeaderComponent","appName","UserPostComponent","twitterService","logger","fileName","postTweet","debug","tweet","reqObj","status","postUserTweet","subscribe","postedTweet","result","showModal","data","resp","statusCode","alert","userheadlines","CommonService","_http","invokeEvent","TwitterService","http","get","pipe","mapGetUserProfile","mapGetHomeTimeline","req","post","environment","production","UserprofileComponent","userprofiledata","HttpResponseWithMessage","ErrorHandlerInterceptor","_log","error","errorData","errorHandler","response","errormessage","statusText","body","modules","SharedModule","AppComponent","title","FeatureModule","LandingComponent","AppModule","MainComponent","onGetFeedError","userFeedAsyncResult$","twitterData","getUserProfile","getHomeTimeLine","getUserTimeLine","getUserMentionsTimeLine","tranformResult","console","log","userData","getHeadLinesData","getUserTimeLinesData","getMentionTimeLinesData","user","getHeadLines","getUserTimeLines","getMentionTimeLines","HttpRequestService","header","responseType","path","put","requestBody","options","headers","undefined","LogLevel","Logger","level","Error","source","objects","Debug","info","Info","warn","Warning","func","concat","apply","outputs","forEach","output","LeftpaneComponent","isSidebarActive","changeToggleEvent","emit","callToggle","UserFeedComponent","sanitizer","userfeeddata","contentHtml","urlRegex","match","bypassSecurityTrustResourceUrl","contentText","text","replace","bypassSecurityTrustHtml","AppLoaderComponent","loaderService","isLoading","isAppLoading","CoreModule","parentModule","provide","useClass","multi","routes","component","outlet","FeatureRoutingModule","forChild","AppRoutingModule","forRoot","LoaderService","bootstrapModule","err","webpackEmptyAsyncContext","Promise","resolve","then","e","code","keys","module","exports","id","RouteReusableStrategy","route","detachedTree","future","curr","routeConfig","reuse"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAMA;;;;;UAMaA,oB;;;;;;;iBAEX,mBAAUC,OAAV,EAAqCC,IAArC,EAAsD;AACpD,gBAAI,CAAC,kBAAkBC,IAAlB,CAAuBF,OAAO,CAACG,GAA/B,CAAD,IAAwC,iEAA5C,EAAyD;AACvDH,qBAAO,GAAGA,OAAO,CAACI,KAAR,CAAc;AAAED,mBAAG,EAAE,sEAAYE,SAAZ,GAAwBL,OAAO,CAACG;AAAvC,eAAd,CAAV;AACD;;AACD,mBAAOF,IAAI,CAACK,MAAL,CAAYN,OAAZ,CAAP;AACD;;;;;;;yBAPUD,oB;AAAoB,O;;;eAApBA,oB;AAAoB,iBAApBA,oBAAoB,K;AAAA,oBAFnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCHDQ,e,GALb;AAAA;;AAOS,aAAAC,OAAA,GAAU,8BAAV;AAER,O;;;yBAJYD,e;AAAe,O;;;cAAfA,e;AAAe,mC;AAAA,gB;AAAA,e;AAAA,4E;AAAA;AAAA;ACP5B;;AACY;;AAAkB;;AAAW;;AACzC;;;;AAD8B;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCSjBE,iB;AAWT,mCACWC,cADX,EAEWC,MAFX,EAEyB;AAAA;;AAAA;;AADd,eAAAD,cAAA,GAAAA,cAAA;AACA,eAAAC,MAAA,GAAAA,MAAA;AALJ,eAAAC,QAAA;;AAaP,eAAAC,SAAA,GAAY,YAAM;AACd,iBAAI,CAACF,MAAL,CAAYG,KAAZ,CAAkB,KAAI,CAACF,QAAvB;;AACA,iBAAI,CAACD,MAAL,CAAYG,KAAZ,CAAkB,KAAI,CAACF,QAAvB,EAAiC,KAAI,CAACG,KAAtC;;AACA,gBAAMC,MAAM,GAAG;AAAEC,oBAAM,EAAE,KAAI,CAACF;AAAf,aAAf;;AACA,iBAAI,CAACL,cAAL,CAAoBQ,aAApB,CAAkCF,MAAlC,EAA0CG,SAA1C,CAAoD,KAAI,CAACC,WAAzD;AACH,WALD;;AAOO,eAAAA,WAAA,GAAc,UAACC,MAAD,EAAiB;AACpC,iBAAI,CAACV,MAAL,CAAYG,KAAZ,CAAkB,KAAI,CAACF,QAAvB;;AACA,iBAAI,CAACD,MAAL,CAAYG,KAAZ,CAAkB,KAAI,CAACF,QAAvB,EAAiCS,MAAjC;;AACA,iBAAI,CAACC,SAAL,CAAeD,MAAf;AAED,WALM;;AAOA,eAAAC,SAAA,GAAY,UAACD,MAAD,EAAY;AAC3B,iBAAI,CAACN,KAAL,GAAa,EAAb;;AACA,gBAAIM,MAAM,CAACE,IAAP,IAAeF,MAAM,CAACG,IAAP,CAAYC,UAAZ,KAA2B,GAA9C,EAAkD;AAC9CC,mBAAK,gDAAL;AACH,aAFD,MAEM;AACFA,mBAAK,uEAAL;AACH;AACJ,WAPM;AArBH;;;;iBAEJ,oBAAQ;AACJ,iBAAKf,MAAL,CAAYG,KAAZ,CAAkB,KAAKF,QAAvB;AACA,iBAAKD,MAAL,CAAYG,KAAZ,CAAkB,KAAKF,QAAvB,EAAiC,KAAKe,aAAtC;AACH;;;;;;;yBAnBQlB,iB,EAAiB,wH,EAAA,4H;AAAA,O;;;cAAjBA,iB;AAAiB,sC;AAAA;AAAA;AAAA;AAAA;AAAA,S;AAAA,iB;AAAA,e;AAAA,sb;AAAA;AAAA;ACR9B;;AAAkC;;AAAe;;AAAQ;;AAEzD;;AACA;;AACI;;AACE;;AAIE;AAAA;AAAA;;AAED;;AACD;;AAAsB;;AAAkB;;AAC1C;;AACJ;;AAAM;;AACN;;AACA;;AAAwB;AAAA,qBAAS,IAAAI,SAAA,EAAT;AAAoB,aAApB;;AAAsB;;AAG9C;;AACI;;AACI;;AACI;;AACJ;;AACA;;AACG;;AACH;;AACA;;AACI;;AACJ;;AACJ;;AACJ;;;;AAtBQ;;AAAA;;AAamB;;AAAA;;AAGD;;AAAA;;AAGC;;AAAA;;;;;;;;;;;;;;;;;;;;;AC5B3B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAGae,a,GAET,uBAA2BC,KAA3B,EAAsD;AAAA;;AAA3B,aAAAA,KAAA,GAAAA,KAAA;AAEpB,aAAAC,WAAA,GAA4B,IAAI,4CAAJ,EAA5B;AAFkD,O;;;yBAFhDF,a,EAAa,0I;AAAA,O;;;eAAbA,a;AAAa,iBAAbA,aAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACH1B;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UASaG,c;AACT;AACA,gCAAoBC,IAApB,EAAsDrB,MAAtD,EAAsE;AAAA;;AAAlD,eAAAqB,IAAA,GAAAA,IAAA;AAAkC,eAAArB,MAAA,GAAAA,MAAA;AAAkB;;;;iBAExE,0BAAc;AAAA;;AACV,iBAAKA,MAAL,CAAYG,KAAZ,CAAkB,gBAAlB;AACA,mBAAO,KAAKkB,IAAL,CACFC,GADE,iBAEFC,IAFE,CAEG,2DAAI,UAACb,MAAD;AAAA,qBAAY,MAAI,CAACc,iBAAL,CAAuBd,MAAvB,CAAZ;AAAA,aAAJ,CAFH,CAAP;AAGH;;;iBAED,2BAAe;AAAA;;AACX,iBAAKV,MAAL,CAAYG,KAAZ,CAAkB,iBAAlB;AACA,mBAAO,KAAKkB,IAAL,CACFC,GADE,kBAEFC,IAFE,CAEG,2DAAI,UAACb,MAAD;AAAA,qBAAY,MAAI,CAACe,kBAAL,CAAwBf,MAAxB,CAAZ;AAAA,aAAJ,CAFH,CAAP;AAGH;;;iBAED,2BAAe;AAAA;;AACX,iBAAKV,MAAL,CAAYG,KAAZ,CAAkB,iBAAlB;AACA,mBAAO,KAAKkB,IAAL,CACFC,GADE,kBAEFC,IAFE,CAEG,2DAAI,UAACb,MAAD;AAAA,qBAAY,MAAI,CAACe,kBAAL,CAAwBf,MAAxB,CAAZ;AAAA,aAAJ,CAFH,CAAP;AAGH;;;iBAED,mCAAuB;AAAA;;AACnB,iBAAKV,MAAL,CAAYG,KAAZ,CAAkB,yBAAlB;AACA,mBAAO,KAAKkB,IAAL,CACFC,GADE,sBAEFC,IAFE,CAEG,2DAAI,UAACb,MAAD;AAAA,qBAAY,MAAI,CAACe,kBAAL,CAAwBf,MAAxB,CAAZ;AAAA,aAAJ,CAFH,CAAP;AAGH;;;iBAED,uBAAcgB,GAAd,EAAiB;AACb,iBAAK1B,MAAL,CAAYG,KAAZ,CAAkB,eAAlB,EAAmCuB,GAAnC;AACA,mBAAO,KAAKL,IAAL,CAAUM,IAAV,eAA6BD,GAA7B,CAAP;AACH;;;iBAED,2BAAkBhB,MAAlB,EAAwB;AACpB,iBAAKV,MAAL,CAAYG,KAAZ,CAAkB,mBAAlB,EAAuCO,MAAvC;AACA,mBAAQA,MAAM,CAACG,IAAP,IAAeH,MAAM,CAACG,IAAP,CAAYC,UAAZ,KAA2B,GAA3C,GAAkDJ,MAAM,CAACE,IAAP,CAAYA,IAA9D,GAAqE,IAA5E;AACH;;;iBAED,4BAAmBF,MAAnB,EAAyB;AACrB,iBAAKV,MAAL,CAAYG,KAAZ,CAAkB,oBAAlB,EAAwCO,MAAxC;AACA,mBAAQA,MAAM,CAACG,IAAP,IAAeH,MAAM,CAACG,IAAP,CAAYC,UAAZ,KAA2B,GAA3C,GAAkDJ,MAAM,CAACE,IAAzD,GAAgE,IAAvE;AACH;;;;;;;yBA7CQQ,c,EAAc,0I,EAAA,mH;AAAA,O;;;eAAdA,c;AAAc,iBAAdA,cAAc,K;AAAA,oBAFX;;;;;;;;;;;;;;;;;ACThB;AAAA;;;AAAA;AAAA;AAAA,S,CAAA;AACA;AACA;;;AAEO,UAAMQ,WAAW,GAAG;AACzBC,kBAAU,EAAE,KADa;AAEzBnC,iBAAS,EAAE;AAFc,OAApB;AAKP;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJI;;AACC;;AAAoD;;AAAI;;AACxD;;AAAoD;;AAAqB;;AAC1E;;;;;;AADqD;;AAAA;;;;;;AAErD;;AACC;;AAAoD;;AAAS;;AAC7D;;AAAoD;;AAAyB;;AAC9E;;;;;;AADqD;;AAAA;;;;;;AAErD;;AACC;;AAAoD;;AAAE;;AACtD;;AAAoD;;AAAmB;;AACxE;;;;;;AADqD;;AAAA;;;;;;AAErD;;AACC;;AAAoD;;AAAQ;;AAC5D;;AAAoD;;AAAyB;;AAC9E;;;;;;AADqD;;AAAA;;;;;;AAErD;;AACC;;AAAoD;;AAAM;;AAC1D;;AAAoD;;;;AAA+C;;AACpG;;;;;;AADqD;;AAAA;;;;;;AA9BzD;;AAOC;;AACC;;AACC;;AAAkC;;AAAiB;;AACnD;;AACA;;AACC;;AAIA;;AAIA;;AAIA;;AAIA;;AAID;;AACD;;AACD;;AACD;;;;;;AAzB+C;;AAAA;;AAES;;AAAA;;AAIA;;AAAA;;AAIA;;AAAA;;AAIC;;AAAA;;AAIA;;AAAA;;;;UClB5CoC,oB;AAIX,sCAAoB9B,MAApB,EAAoC;AAAA;;AAAhB,eAAAA,MAAA,GAAAA,MAAA;AAFb,eAAA+B,eAAA,GAAiD,IAAjD;AAEgC;;;;iBAEvC,oBAAQ;AACN,iBAAK/B,MAAL,CAAYG,KAAZ,+CAAyD,KAAK4B,eAA9D;AACD;;;;;;;yBARUD,oB,EAAoB,4H;AAAA,O;;;cAApBA,oB;AAAoB,wC;AAAA;AAAA;AAAA,S;AAAA,gB;AAAA,e;AAAA,4Z;AAAA;AAAA;ADVjC;;;;AAAe;;;;;;;;;;;;;;;;;;;;;;AEAf;AAAA;;;AAAA;AAAA;AAAA;AAAA;;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;ACCA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA,c,CAMA;;;UAEaE,uB;;;;;;;;;;;;QAAgC,iE;AAG7C;;;;;UAMaC,uB;AAEX,yCAA2BC,IAA3B,EAAyC;AAAA;;AAAd,eAAAA,IAAA,GAAAA,IAAA;AAAiB;AAE5C;;;;;;;;;;iBAMO,mBAAU7C,OAAV,EAAqCC,IAArC,EAAsD;AAAA;;AAC3D,mBAAOA,IAAI,CAACK,MAAL,CAAYN,OAAZ,EAAqBkC,IAArB,CACL,iEAAU,UAAAY,KAAK,EAAI;AACjB,qBAAOA,KAAK,CAACZ,IAAN,CACL,gEAAS,UAACa,SAAD,EAAoB;AAC3B;AACA,uBAAOA,SAAS,CAAC9B,MAAV,KAAqB,GAArB,GAA2B,gDAAG8B,SAAH,CAA3B,GAA2C,wDAAWA,SAAX,CAAlD;AACD,eAHD,CADK,EAKL,4DAAK,CAAL,CALK,EAML,8DAAO,wDAAWD,KAAX,CAAP,CANK,CAAP;AAOD,aARD,CADK,EAUL,kEAAW,UAACA,KAAD;AAAA,qBAAW,MAAI,CAACE,YAAL,CAAkBF,KAAlB,CAAX;AAAA,aAAX,CAVK,CAAP;AAWD;AAED;;;;;;;;iBAKQ,sBAAaG,QAAb,EAA8C;AACpD,gBAAMC,YAAY,kBAAWD,QAAQ,CAAC9C,GAApB,sBAAmC8C,QAAQ,CAAChC,MAA5C,0BAAkEgC,QAAQ,CAACE,UAA3E,oBAA+FF,QAAQ,CAACG,IAAxG,CAAlB;;AACA,iBAAKP,IAAL,CAAUC,KAAV,CAAgB,WAAhB,EAA6BI,YAA7B;;AACA,kBAAMD,QAAN;AACD;;;;;;;yBAjCUL,uB,EAAuB,8G;AAAA,O;;;eAAvBA,uB;AAAuB,iBAAvBA,uBAAuB,K;AAAA,oBAFtB;;;;;;;;;;;;;;;;;ACfd;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAgCA,UAAMS,OAAO,GAAG,CAEZ,2DAFY,EAGZ,2DAHY,EAIZ,6DAJY,EAKZ,yEALY,CAAhB;;UA0CaC,Y;;;;;cAAAA;;;;2BAAAA,Y;AAAY,S;AAAA,mBAhBV,CACP,uEADO,C;AAEV,mBAnBG,4DAmBH,EAlBG,4DAkBH,EAjBG,uEAiBH,EAhBG,4FAgBH,EAfG,0DAeH,SAdMD,OAcN,GAEG,4DAFH,EAGG,4DAHH,EAIG,uEAJH,EAKG,4FALH,EAMG,0DANH,EA1BD,2DA0BC,EAzBD,2DAyBC,EAxBD,6DAwBC,EAvBD,yEAuBC;;;;6HAcQC,Y,EAAY;AAAA,yBAzBjB,4EAyBiB,EAxBjB,wEAwBiB,EAvBjB,+EAuBiB,EAtBjB,4EAsBiB,EArBjB,yEAqBiB,EApBjB,gFAoBiB,EAnBjB,6EAmBiB,EAlBjB,6EAkBiB;AAlBA,oBAfjB,4DAeiB,EAdjB,4DAciB,EAbjB,uEAaiB,EAZjB,4FAYiB,EAXjB,0DAWiB,EAtBrB,2DAsBqB,EArBrB,2DAqBqB,EApBrB,6DAoBqB,EAnBrB,yEAmBqB,CAkBA;AArCF,oBAyBf,4DAzBe,EA0Bf,4DA1Be,EA2Bf,uEA3Be,EA4Bf,4FA5Be,EA6Bf,0DA7Be,EA8Bf,4EA9Be,EA+Bf,wEA/Be,EAgCf,+EAhCe,EAiCf,4EAjCe,EAHnB,2DAGmB,EAFnB,2DAEmB,EADnB,6DACmB,EAAnB,yEAAmB;AAqCE,S;AArCF,O;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UC9BVC,Y,GALb;AAAA;;AAME,aAAAC,KAAA,GAAQ,SAAR;AACD,O;;;yBAFYD,Y;AAAY,O;;;cAAZA,Y;AAAY,iC;AAAA,gB;AAAA,e;AAAA;AAAA;ACRzB;;;;;;;;;;;;;;;;;;;;;ACCA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAYaE,a;;;;;cAAAA;;;;2BAAAA,a;AAAa,S;AAAA,kBANf,CACP,4DADO,EAEP,4EAFO,CAMe;;;;4HAAbA,a,EAAa;AAAA,oBALtB,4DAKsB,EAJtB,4EAIsB;AAAA,S;AAJF,O;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRxB;;;;;;;;UAWaC,gB;;;;;yBAAAA,gB;AAAgB,O;;;cAAhBA,gB;AAAgB,oC;AAAA,gB;AAAA,e;AAAA,iE;AAAA;AAAA;ACZ7B;;AACI;;AACA;;AACJ;;AACA;;;;;;;;;;;;;;;;;;;;;ACJA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAyBaC,S;;;;;cAAAA,S;AAAS,oBAFR,2DAEQ;;;;2BAATA,S;AAAS,S;AAAA,mBAHT,E;AAAE,kBARJ,CACP,4DADO,EAEP,uEAFO,EAGP,oEAHO,EAIP,4DAJO,EAKP,kEALO,EAMP,qEANO,CAQI;;;;4HAGFA,S,EAAS;AAAA,yBAblB,2DAakB;AAbN,oBAGZ,4DAHY,EAIZ,uEAJY,EAKZ,oEALY,EAMZ,4DANY,EAOZ,kEAPY,EAQZ,qEARY;AAaM,S;AALL,O;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBjB;;;;;;AAQA;;AACC;;;;AAEA;;AACC;;;;;;;;AAID;;AACD;;AACA;;;;;;;;;;;AATmB;;AAAA;;AAGF;;AAAA,oOAA8D,eAA9D,EAA8D,kJAA9D,EAA8D,mBAA9D,EAA8D,sJAA9D;;;;;;AAUhB;;AACE;;AACA;;AACA;;AAAI;;AAAY;;AAChB;;AAAI;;AAAe;;AACnB;;AAAI;;AAAY;;AAChB;;AAAI;;AAAmB;;AACvB;;AAAI;;AAAY;;AACf;;AACH;;;;UCfYC,a;AAKT,+BACWlD,cADX,EAEWC,MAFX,EAEyB;AAAA;;AAAA;;AADd,eAAAD,cAAA,GAAAA,cAAA;AACA,eAAAC,MAAA,GAAAA,MAAA;AAJJ,eAAAC,QAAA;;AA0BP,eAAAiD,cAAA,GAAiB,UAACf,KAAD,EAAiB;AAC9B,kBAAI,CAACnC,MAAL,CAAYG,KAAZ,CAAkB,MAAI,CAACF,QAAvB;;AACA,kBAAI,CAACD,MAAL,CAAYG,KAAZ,CAAkB,MAAI,CAACF,QAAvB,EAAiCkC,KAAjC;AACH,WAHD;AArBI;;;;iBAEJ,oBAAQ;AACJ,iBAAKgB,oBAAL,GAA4B,KAAKC,WAAL,EAA5B;AACA,iBAAKpD,MAAL,CAAYG,KAAZ,CAAkB,KAAKF,QAAvB;AACA,iBAAKD,MAAL,CAAYG,KAAZ,CAAkB,KAAKF,QAAvB,EAAiC,KAAKkD,oBAAtC,EAHI,CAIJ;AACH;;;iBACM,uBAAW;AAAA;;AACd;AACA,mBAAO,sDAAS,CACZ,KAAKpD,cAAL,CAAoBsD,cAApB,EADY,EAEZ,KAAKtD,cAAL,CAAoBuD,eAApB,EAFY,EAGZ,KAAKvD,cAAL,CAAoBwD,eAApB,EAHY,EAIZ,KAAKxD,cAAL,CAAoByD,uBAApB,EAJY,CAAT,EAKJjC,IALI,CAMH,kEAAW,UAAOY,KAAP;AAAA,qBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,8DAAKe,cAAL,CAAoBf,KAApB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAjB;AAAA,aAAX,CANG,EAOH,2DAAI,UAACzB,MAAD;AAAA,qBAAY+C,cAAc,CAAC/C,MAAD,CAA1B;AAAA,aAAJ,CAPG,CAAP;AASH;;;;;;;yBA3BQuC,a,EAAa,wH,EAAA,4H;AAAA,O;;;cAAbA,a;AAAa,iC;AAAA,gB;AAAA,e;AAAA,2Q;AAAA;AAAA;ADhB1B;;;;AAMA;;AAeA;;;;;;;;AArBe,wKAAsC,UAAtC,EAAsC,GAAtC,EAAsC,UAAtC,EAAsC,GAAtC;;;;;;;;ACmDR,eAASQ,cAAT,CAAwB/C,MAAxB,EAAgC;AACnCgD,eAAO,CAACC,GAAR;AACAD,eAAO,CAACC,GAAR,kBAA6BjD,MAA7B;AACA,YAAMkD,QAAQ,GAAsBlD,MAAM,CAAC,CAAD,CAA1C;AACA,YAAMmD,gBAAgB,GAA0BnD,MAAM,CAAC,CAAD,CAAtD;AACA,YAAMoD,oBAAoB,GAA0BpD,MAAM,CAAC,CAAD,CAA1D;AACA,YAAMqD,uBAAuB,GAA0BrD,MAAM,CAAC,CAAD,CAA7D;AACAgD,eAAO,CAACC,GAAR,CAAY;AACRK,cAAI,EAAEJ,QADE;AAERK,sBAAY,EAAEJ,gBAFN;AAGRK,0BAAgB,EAAEJ,oBAHV;AAIRK,6BAAmB,EAAEJ;AAJb,SAAZ;AAMA,eAAO;AACHC,cAAI,EAAEJ,QADH;AAEHK,sBAAY,EAAEJ,gBAFX;AAGHK,0BAAgB,EAAEJ,oBAHf;AAIHK,6BAAmB,EAAEJ;AAJlB,SAAP;AAMH;;;;;;;;;;;;;;;;;ACrED;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAQaK,kB;AAGX,oCAAoB/C,IAApB,EAA8CrB,MAA9C,EAA8D;AAAA;;AAA1C,eAAAqB,IAAA,GAAAA,IAAA;AAA0B,eAAArB,MAAA,GAAAA,MAAA;AAFtC,eAAAqE,MAAA,GAAsB,IAAI,gEAAJ,CAAgB;AAAEC,wBAAY,EAAE;AAAhB,WAAhB,CAAtB;AAGN,eAAKtE,MAAL,CAAYG,KAAZ,uBAAwC,sEAAYT,SAApD;AACA;AAEF;;;;;;;;;;iBAMO,aAAI6E,IAAJ,EAAkBF,MAAlB,EAAiC;AACtC,iBAAKrE,MAAL,CAAYG,KAAZ;AACA,iBAAKH,MAAL,CAAYG,KAAZ,uBAAwC,sEAAYT,SAAZ,GAAwB6E,IAAhE;AACAF,kBAAM,GAAGA,MAAM,SAAN,IAAAA,MAAM,WAAN,GAAAA,MAAA,GAAU,KAAKA,MAAxB;AACA,gBAAM7E,GAAG,GAAG,sEAAYE,SAAZ,GAAwB6E,IAApC;AACA,mBAAO,KAAKlD,IAAL,CAAUC,GAAV,CAAc9B,GAAd,EAAmB6E,MAAnB,CAAP;AACD;AAED;;;;;;;;;;iBAOO,cAAKE,IAAL,EAAmB9B,IAAnB,EAAiC4B,MAAjC,EAAgD;AACrD,iBAAKrE,MAAL,CAAYG,KAAZ;AACA,iBAAKH,MAAL,CAAYG,KAAZ,uBAAwCsC,IAAxC;AACA,iBAAKzC,MAAL,CAAYG,KAAZ,uBAAwC,sEAAYT,SAAZ,GAAwB6E,IAAhE;AACAF,kBAAM,GAAGA,MAAM,SAAN,IAAAA,MAAM,WAAN,GAAAA,MAAA,GAAU,KAAKA,MAAxB;AACA,gBAAM7E,GAAG,GAAG,sEAAYE,SAAZ,GAAwB6E,IAApC;AACA,mBAAO,KAAKlD,IAAL,CAAUM,IAAV,CAAenC,GAAf,EAAoBiD,IAApB,EAA0B4B,MAA1B,CAAP;AACD;AAED;;;;;;;;;;iBAOO,aAAIE,IAAJ,EAAkB9B,IAAlB,EAAiC4B,MAAjC,EAAgD;AACrDA,kBAAM,GAAGA,MAAM,SAAN,IAAAA,MAAM,WAAN,GAAAA,MAAA,GAAU,KAAKA,MAAxB;AACA,gBAAM7E,GAAG,GAAG,sEAAYE,SAAZ,GAAwB6E,IAApC;AACA,mBAAO,KAAKlD,IAAL,CAAUmD,GAAV,CAAchF,GAAd,EAAmBiD,IAAnB,EAAyB4B,MAAzB,CAAP;AACD;AAED;;;;;;;;;;iBAOO,iBAAOE,IAAP,EAAqBF,MAArB,EAAsCI,WAAtC,EAA0D;AAC/D,gBAAMC,OAAO,GAAG;AACdC,qBAAO,EAAEN,MAAM,KAAKO,SAAX,GAAuB,KAAKP,MAA5B,GAAqC,IAAI,gEAAJ,CAAgBA,MAAhB,CADhC;AAEd5B,kBAAI,EAAEgC;AAFQ,aAAhB;AAIA,gBAAMjF,GAAG,GAAG,sEAAYE,SAAZ,GAAwB6E,IAApC;AACA,mBAAO,KAAKlD,IAAL,CAAUhC,OAAV,CAAkB,QAAlB,EAA4BG,GAA5B,EAAiCkF,OAAjC,CAAP;AACD;;;;;;;yBAhEUN,kB,EAAkB,uH,EAAA,mH;AAAA,O;;;eAAlBA,kB;AAAkB,iBAAlBA,kBAAkB,K;AAAA,oBAFjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLd,UAAYS,QAAZ;;AAAA,iBAAYA,QAAZ,EAAoB;AAClB;AACA;AACA;AACA;AACA;AACA;AACD,OAPD,EAAYA,QAAQ,KAARA,QAAQ,MAApB;;UAoBaC,M;AACX,0BAAc;AAAA;AAAG;AAYjB;;;;;;;;iBAIO,gCAAuB;AAC5BA,kBAAM,CAACC,KAAP,GAAeF,QAAQ,CAACG,KAAxB;AACD;AAED;;;;;;;iBAIO,eAAMC,MAAN,EAAyC;AAAA,8CAAhBC,OAAgB;AAAhBA,qBAAgB;AAAA;;AAC9C,iBAAKvB,GAAL,CAASsB,MAAT,EAAiBvB,OAAO,CAACC,GAAzB,EAA8BkB,QAAQ,CAACM,KAAvC,EAA8CD,OAA9C;AACD;AAED;;;;;;;iBAIO,cAAKD,MAAL,EAAwC;AAAA,+CAAhBC,OAAgB;AAAhBA,qBAAgB;AAAA;;AAC7C;AACA,iBAAKvB,GAAL,CAASsB,MAAT,EAAiBvB,OAAO,CAAC0B,IAAzB,EAA+BP,QAAQ,CAACQ,IAAxC,EAA8CH,OAA9C;AACD;AAED;;;;;;;iBAIO,cAAKD,MAAL,EAAwC;AAAA,+CAAhBC,OAAgB;AAAhBA,qBAAgB;AAAA;;AAC7C,iBAAKvB,GAAL,CAASsB,MAAT,EAAiBvB,OAAO,CAAC4B,IAAzB,EAA+BT,QAAQ,CAACU,OAAxC,EAAiDL,OAAjD;AACD;AAED;;;;;;;iBAIO,eAAMD,MAAN,EAAyC;AAAA,+CAAhBC,OAAgB;AAAhBA,qBAAgB;AAAA;;AAC9C,iBAAKvB,GAAL,CAASsB,MAAT,EAAiBvB,OAAO,CAACvB,KAAzB,EAAgC0C,QAAQ,CAACG,KAAzC,EAAgDE,OAAhD;AACD;AAED;;;;;;;;;;;iBAQQ,aAAID,MAAJ,EAAoBO,IAApB,EAAoDT,KAApD,EAAqEG,OAArE,EAAqF;AAC3F,gBAAMvB,GAAG,GAAG,CAAC,MAAMsB,MAAN,GAAe,MAAhB,EAAwBQ,MAAxB,CAA+BP,OAA/B,CAAZ;;AACA,gBAAIH,KAAK,IAAID,MAAM,CAACC,KAApB,EAA2B;AACzBS,kBAAI,CAACE,KAAL,CAAWhC,OAAX,EAAoBC,GAApB;AACAmB,oBAAM,CAACa,OAAP,CAAeC,OAAf,CAAuB,UAACC,MAAD;AAAA,uBAAYA,MAAM,CAACH,KAAP,CAAaG,MAAb,EAAqB,CAACZ,MAAD,EAASF,KAAT,EAAgBG,OAAhB,CAArB,CAAZ;AAAA,eAAvB;AACD;AACF;;;;;AAlED;;;;;;AAIO,aAAAH,KAAA,GAAQF,QAAQ,CAACM,KAAjB;AAEP;;;;AAGO,aAAAQ,OAAA,GAAuB,EAAvB;;;yBAXIb,M;AAAM,O;;;eAANA,M;AAAM,iBAANA,MAAM,K;AAAA,oBAJL;;;;;;;;;;;;;;;;;AClBd;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;ACEQ;;AACI;;AACJ;;;;UDGKgB,iB;AALb;AAAA;;AAOS,eAAAC,eAAA,GAA2B,KAA3B;AAGA,eAAAC,iBAAA,GAAoB,IAAI,0DAAJ,EAApB;AAWR;AATC;;;;;;;;iBAIO,sBAAa;AAClB,iBAAKD,eAAL,GAAuB,CAAC,KAAKA,eAA7B;AACA,iBAAKC,iBAAL,CAAuBC,IAAvB;AACD;;;;;;;yBAdUH,iB;AAAiB,O;;;cAAjBA,iB;AAAiB,qC;AAAA;AAAA;AAAA,S;AAAA,gB;AAAA,e;AAAA,8N;AAAA;AAAA;ACP9B;;AACI;;AACI;;AAGJ;;AACA;;AACI;;AAA8D;AAAA,qBAAS,IAAAI,UAAA,EAAT;AAAqB,aAArB;;AAAuB;;AACzF;;AACJ;;;;AAPsC;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACCnC;;;;;;AACC;;;;;;AAGC;;AAA2E;;AAC7C;;;;;;AAD6C;;AAAA;;;;;;AAE1E;;AACkC;;;;AAAmD;;;;;;AAAnD;;AAAA;;;;;;AAJpC;;AAA8D;;AAC7D;;AAEC;;AAEF;;;;;;AAL8D;;AAAA;;AACtD;;AAAA;;AAEC;;AAAA;;;;;;AAKV;;;;;;AACC;;;;;;AAdH;;AACC;;AACC;;AAEA;;AACC;;AAMD;;AACA;;AACA;;AAED;;AACD;;;;;;;;AAd2C;;AAAA;;AAGjC;;AAAA;;AAO8B;;AAAA;;AAChC;;AAAA;;;;UCHIC,iB;AAKX,mCAAoBnG,MAApB,EAA6CoG,SAA7C,EAAsE;AAAA;;AAAlD,eAAApG,MAAA,GAAAA,MAAA;AAAyB,eAAAoG,SAAA,GAAAA,SAAA;AAHtC,eAAAC,YAAA,GAAoB,IAApB;AAGkE;;;;iBAEzE,oBAAQ;AACN,iBAAKrG,MAAL,CAAYG,KAAZ,4CAAsD,KAAKkG,YAA3D;AACD;;;iBAGD,qBAAYC,WAAZ,EAA+B;AAC7B,gBAAMC,QAAQ,GAAG,oBAAjB;AACA,gBAAM/G,GAAG,GAAG8G,WAAW,CAACE,KAAZ,CAAkBD,QAAlB,IAA8BD,WAAW,CAACE,KAAZ,CAAkBD,QAAlB,EAA4B,CAA5B,CAA9B,GAA+D,IAA3E;AACA,mBAAO,KAAKH,SAAL,CAAeK,8BAAf,CAA8CjH,GAA9C,CAAP;AACD;;;iBAID,sBAAakH,WAAb,EAAgC;AAC9B,gBAAMH,QAAQ,GAAG,6BAAjB;AACA,gBAAMI,IAAI,GAAGD,WAAW,CAACE,OAAZ,CAAoBL,QAApB,EAA8B,EAA9B,CAAb;AACA,mBAAO,KAAKH,SAAL,CAAeS,uBAAf,CAAuCF,IAAvC,IAA+C,KAAKP,SAAL,CAAeS,uBAAf,CAAuCF,IAAvC,CAA/C,GAA8F,IAArG;AACD;;;;;;;yBAxBUR,iB,EAAiB,4H,EAAA,uI;AAAA,O;;;cAAjBA,iB;AAAiB,sC;AAAA;AAAA;AAAA,S;AAAA,gB;AAAA,e;AAAA,kpB;AAAA;AAAA;ADX9B;;AACC;;AAiBD;;;;AAjBoC;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AEDpC;;AACE;;AAEE;;AACF;;AACF;;;ACDA;;;;;;;;UAWaW,kB;AAMX;;;;;AAKA,kCAA2BC,aAA3B,EAAyD;AAAA;;AAA9B,aAAAA,aAAA,GAAAA,aAAA;AAPpB,aAAAC,SAAA,GAA8B,KAAKD,aAAL,CAAmBE,YAAjD;AAOqD,O;;;yBAXjDH,kB,EAAkB,sI;AAAA,O;;;cAAlBA,kB;AAAkB,mC;AAAA;AAAA;AAAA,S;AAAA,gB;AAAA,e;AAAA,kM;AAAA;AAAA;ADf/B;;;;;;AAA6C;;;;;;;;;;;;;;;;;;;;;;AEC7C;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;UAgCaI,U,GACX,oBAAoCC,YAApC,EAA8D;AAAA;;AAC5D;AACA,YAAIA,YAAJ,EAAkB;AAChB,gBAAM,IAAInC,KAAJ,WAAamC,YAAb,yEAAN;AACD;AACF,O;;;cANUD;;;;2BAAAA,U,EAAU,uDAC6BA,UAD7B,EACuC,EADvC,C;AACuC,S;AAAA,mBApBjD,CACT;AACEE,iBAAO,EAAE,sEADX;AAEEC,kBAAQ,EAAE,iFAFZ;AAGEC,eAAK,EAAE;AAHT,SADS,EAMT;AACEF,iBAAO,EAAE,sEADX;AAEEC,kBAAQ,EAAE,uFAFZ;AAGEC,eAAK,EAAE;AAHT,SANS,EAWT;AACEF,iBAAO,EAAE,kEADX;AAEEC,kBAAQ,EAAE;AAFZ,SAXS,EAeT,6EAfS,C;AAgBV,kBAnBQ,CACP,4DADO,EACO,qEADP,EACyB,4DADzB,CAmBR;;;;4HAGUH,U,EAAU;AAAA,oBArBnB,4DAqBmB,EArBL,qEAqBK,EArBa,4DAqBb;AAAA,S;AArByB,O;;;;;;;;;;;;;;;;;ACXhD;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAGO,UAAMK,MAAM,GAAW,CAC5B;AACEhD,YAAI,EAAE,EADR;AAEEiD,iBAAS,EAAE,gEAFb;AAGEC,cAAM,EAAE;AAHV,OAD4B,CAAvB;;UAYMC,oB;;;;;cAAAA;;;;2BAAAA,oB;AAAoB,S;AAAA,kBAHtB,CAAC,6DAAaC,QAAb,CAAsBJ,MAAtB,CAAD,CAGsB,EAFrB,4DAEqB;;;;4HAApBG,oB,EAAoB;AAAA;AAAA,oBAFrB,4DAEqB;AAAA,S;AAFT,O;;;;;;;;;;;;;;;;;ACbxB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAEA,UAAMH,MAAM,GAAW,EAAvB;;UAMaK,gB;;;;;cAAAA;;;;2BAAAA,gB;AAAgB,S;AAAA,kBAHlB,CAAC,6DAAaC,OAAb,CAAqBN,MAArB,CAAD,CAGkB,EAFjB,4DAEiB;;;;4HAAhBK,gB,EAAgB;AAAA;AAAA,oBAFjB,4DAEiB;AAAA,S;AAFL,O;;;;;;;;;;;;;;;;;ACPxB;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;ACCA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAEA;;;;;;;;UAOaE,a;AADb;AAAA;;AAGE;AACO,eAAAb,YAAA,GAAe,IAAI,4CAAJ,EAAf;AAgBR;AAdC;;;;;;;;iBAIO,2BAAkB;AACvB,iBAAKA,YAAL,CAAkB3H,IAAlB,CAAuB,IAAvB;AACD;AACD;;;;;;;iBAIO,2BAAkB;AACvB,iBAAK2H,YAAL,CAAkB3H,IAAlB,CAAuB,KAAvB;AACD;;;;;;;yBAlBUwI,a;AAAa,O;;;eAAbA,a;AAAa,iBAAbA,aAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJ1B,UAAI,sEAAYjG,UAAhB,EAA4B;AAC1B;AACD;;AAED,kFAAyBkG,eAAzB,CAAyC,yDAAzC,WACS,UAAAC,GAAG;AAAA,eAAItE,OAAO,CAACvB,KAAR,CAAc6F,GAAd,CAAJ;AAAA,OADZ;;;;;;;;;;;;;;;ACVA,eAASC,wBAAT,CAAkCvG,GAAlC,EAAuC;AACtC;AACA;AACA,eAAOwG,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACxC,cAAIC,CAAC,GAAG,IAAIrD,KAAJ,CAAU,yBAAyBtD,GAAzB,GAA+B,GAAzC,CAAR;AACA2G,WAAC,CAACC,IAAF,GAAS,kBAAT;AACA,gBAAMD,CAAN;AACA,SAJM,CAAP;AAKA;;AACDJ,8BAAwB,CAACM,IAAzB,GAAgC,YAAW;AAAE,eAAO,EAAP;AAAY,OAAzD;;AACAN,8BAAwB,CAACE,OAAzB,GAAmCF,wBAAnC;AACAO,YAAM,CAACC,OAAP,GAAiBR,wBAAjB;AACAA,8BAAwB,CAACS,EAAzB,GAA8B,MAA9B;;;;;;;;;;;;;;;;ACZA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAIA;;;;;;;UAMaC,qB;;;;;AAGX,uCAA4BzG,IAA5B,EAA0C;AAAA;;AAAA;;AACxC;AAD0B,iBAAAA,IAAA,GAAAA,IAAA;AADpB,iBAAAjC,QAAA,GAAW,gBAAX;AACkC;AAEzC;;;;iBACM,sBAAa2I,KAAb,EAA0C;AAC/C,iBAAK1G,IAAL,CAAU/B,KAAV,CAAgB,KAAKF,QAArB,EAA+B2I,KAA/B;;AACA,mBAAO,KAAP;AACD;;;iBAEM,eAAMA,KAAN,EAAqCC,YAArC,EAA6E;AAClF,iBAAK3G,IAAL,CAAU/B,KAAV,CAAgB,KAAKF,QAArB,EAA+B2I,KAA/B;;AACA,iBAAK1G,IAAL,CAAU/B,KAAV,CAAgB,KAAKF,QAArB,EAA+B4I,YAA/B;AACD;;;iBAEM,sBAAaD,KAAb,EAA0C;AAC/C,iBAAK1G,IAAL,CAAU/B,KAAV,CAAgB,KAAKF,QAArB,EAA+B2I,KAA/B;;AACA,mBAAO,KAAP;AACD;;;iBAEM,kBAASA,KAAT,EAAsC;AAC3C,iBAAK1G,IAAL,CAAU/B,KAAV,CAAgB,KAAKF,QAArB,EAA+B2I,KAA/B;;AACA,mBAAO,IAAP;AACD;;;iBAEM,0BAAiBE,MAAjB,EAAiDC,IAAjD,EAA6E;AAClF,iBAAK7G,IAAL,CAAU/B,KAAV,CAAgB,KAAKF,QAArB,EAA+B6I,MAA/B;;AACA,iBAAK5G,IAAL,CAAU/B,KAAV,CAAgB,KAAKF,QAArB,EAA+B8I,IAA/B;;AACA,mBAAOD,MAAM,CAACE,WAAP,KAAuBD,IAAI,CAACC,WAA5B,IAA2CF,MAAM,CAAClI,IAAP,CAAYqI,KAA9D;AACD;;;;QA9BwC,kE;;;yBAA9BN,qB,EAAqB,8G;AAAA,O;;;eAArBA,qB;AAAqB,iBAArBA,qBAAqB","file":"main-es5.js","sourcesContent":["import { Injectable, isDevMode } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { environment } from '../../../environments/environment';\n\n/**\n * Prefixes all requests not starting with `http[s]` with `environment.serverUrl`.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiPrefixInterceptor implements HttpInterceptor {\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (!/^(http|https):/i.test(request.url) && isDevMode()) {\n      request = request.clone({ url: environment.serverUrl + request.url });\n    }\n    return next.handle(request);\n  }\n}\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent {\n\n  public appName = 'Twitter Technical Assessment';\n\n}\n","<header class=\"header_block container-fluid\">\n            <h2 id=\"app-name\">{{appName}}</h2>\n</header>","import { Component, Input, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TwitterService, ITweetUserProfile } from '../../service';\nimport { Logger } from '../../../../core/logger.service';\n\n@Component({\n    selector: 'app-user-post',\n    templateUrl: './user-post.component.html',\n    styleUrls: ['./user-post.component.scss'],\n})\nexport class UserPostComponent implements OnInit {\n    @Input() \n    public userheadlines: any;\n    @Input() \n    public usertimelines: any;\n    @Input()\n    public usermentionslines: any;\n    public tweet: string;\n    public fileName = `UserPostComponent`;\n\n\n    constructor(\n        public twitterService: TwitterService,\n        public logger: Logger\n    ) {}\n\n    ngOnInit(): void {\n        this.logger.debug(this.fileName, `userFeeddata`);\n        this.logger.debug(this.fileName, this.userheadlines);\n    }\n\n    postTweet = () => {\n        this.logger.debug(this.fileName, `post tweet`);\n        this.logger.debug(this.fileName, this.tweet);\n        const reqObj = { status: this.tweet};\n        this.twitterService.postUserTweet(reqObj).subscribe(this.postedTweet);\n    }\n\n    public postedTweet = (result: any) => {\n      this.logger.debug(this.fileName, `postedTweet`);\n      this.logger.debug(this.fileName, result);\n      this.showModal(result);\n      \n    }\n\n    public showModal = (result) => {\n        this.tweet = '';\n        if (result.data && result.resp.statusCode === 200){\n            alert(`Successfully posted. Please refresh the page`);\n        } else{\n            alert(` Sorry Content already posted | Server configuration is not correct`);\n        }\n    }\n}\n","\n\n<label class=\"app-user-post__lbl\">Post your Tweet</label><br>\n\n<div class=\"p-fluid p-grid app-user-post__tweet-area\">\n<div class=\"p-field p-col-1\">\n    <span class=\"p-float-label\">\n      <textarea\n        inputId=\"tweetArea\"\n        rows=\"3\"\n        cols=\"30\"\n        [(ngModel)]=\"tweet\"\n        pInputTextarea\n      ></textarea>\n      <label for=\"textarea\">Post your tweet...</label>\n    </span>\n</div><br>\n</div>\n<p-button label=\"Tweet\" (click)=\"postTweet()\"></p-button>\n\n\n<div class=\"app-user-post__tab-area\">\n    <p-tabView>\n        <p-tabPanel header=\"Tweets\">\n            <app-user-feed [userfeeddata]=\"usertimelines\"></app-user-feed>\n        </p-tabPanel>\n        <p-tabPanel header=\"Tweets & Retweets\">\n           <app-user-feed [userfeeddata]=\"userheadlines\"></app-user-feed>\n        </p-tabPanel>\n        <p-tabPanel header=\"Mentions\">\n            <app-user-feed [userfeeddata]=\"usermentionslines\"></app-user-feed>\n        </p-tabPanel>\n    </p-tabView>\n</div>","import { Injectable } from '@angular/core';\nimport { HttpRequestService } from '../../core/http/http-request.service';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class CommonService {\n\n    public constructor(private _http: HttpRequestService) { }\n\n    public invokeEvent: Subject<any> = new Subject();\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\nimport { HttpRequestService } from '../../../core/http/http-request.service';\nimport { ITweetUserProfile, ITweetRecentTweets, ITweetUserHeadlines } from './twitter-feed.interface';\nimport { Logger } from '../../../core/logger.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class TwitterService {\n    // tslint:disable-next-line: variable-name\n    constructor(private http: HttpRequestService, private logger: Logger) {}\n\n    getUserProfile(): Observable<any> {\n        this.logger.debug('getUserProfile');\n        return this.http\n            .get(`profile_info`)\n            .pipe(map((result) => this.mapGetUserProfile(result)));\n    }\n\n    getHomeTimeLine(): Observable<any> {\n        this.logger.debug('getHomeTimeLine');\n        return this.http\n            .get(`home_timeline`)\n            .pipe(map((result) => this.mapGetHomeTimeline(result)));\n    }\n\n    getUserTimeLine(): Observable<any> {\n        this.logger.debug('getUserTimeLine');\n        return this.http\n            .get(`user_timeline`)\n            .pipe(map((result) => this.mapGetHomeTimeline(result)));\n    }\n\n    getUserMentionsTimeLine(): Observable<any> {\n        this.logger.debug('getUserMentionsTimeLine');\n        return this.http\n            .get(`mentions_timeline`)\n            .pipe(map((result) => this.mapGetHomeTimeline(result)));\n    }\n\n    postUserTweet(req): Observable<any> {\n        this.logger.debug('postUserTweet', req);\n        return this.http.post(`post_tweet`, req);\n    }\n\n    mapGetUserProfile(result): ITweetUserProfile {\n        this.logger.debug('mapGetUserProfile', result);\n        return (result.resp && result.resp.statusCode === 200) ? result.data.data : null;\n    }\n\n    mapGetHomeTimeline(result): ITweetUserHeadlines[] {\n        this.logger.debug('mapGetHomeTimeline', result);\n        return (result.resp && result.resp.statusCode === 200) ? result.data : null;\n    }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  serverUrl: 'http://localhost:3000/'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","<ng-container *ngIf=\"(userprofiledata) as userProfile\">\n\t<!--{{userProfile?.name}}\n\t{{userProfile?.id}}\n\t{{userProfile?.profile_image_url}}\n\t{{userProfile?.location}}\n\t{{userProfile?.screen_name}} -->\n\n\t<div class=\"app-userprofile app-userprofile__left\">\n\t\t<div class=\"app-userprofile__centered\">\n\t\t\t<div class=\"app-userprofile__hdr\">User Profile Info</div>\n\t\t\t<img class=\"app-userprofile__centered--img\" [src]=\"userProfile?.profile_image_url\" alt=\"Twitter Avatar\">\n\t\t\t<div class=\"app-userprofile__centered__table\">\n\t\t\t\t<div class=\"app-userprofile__centered__table--row\" *ngIf=\"userProfile.name\">\n\t\t\t\t\t<div class=\"app-userprofile__centered__table--data\">Name</div>\n\t\t\t\t\t<div class=\"app-userprofile__centered__table--data\">{{userProfile?.name}}</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"app-userprofile__centered__table--row\" *ngIf=\"userProfile.username\">\n\t\t\t\t\t<div class=\"app-userprofile__centered__table--data\">User Name</div>\n\t\t\t\t\t<div class=\"app-userprofile__centered__table--data\">{{userProfile?.username}}</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"app-userprofile__centered__table--row\" *ngIf=\"userProfile.id\">\n\t\t\t\t\t<div class=\"app-userprofile__centered__table--data\">Id</div>\n\t\t\t\t\t<div class=\"app-userprofile__centered__table--data\">{{userProfile?.id}}</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"app-userprofile__centered__table--row\"  *ngIf=\"userProfile.location\">\n\t\t\t\t\t<div class=\"app-userprofile__centered__table--data\">Location</div>\n\t\t\t\t\t<div class=\"app-userprofile__centered__table--data\">{{userProfile?.location}}</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"app-userprofile__centered__table--row\"  *ngIf=\"userProfile.created_at\">\n\t\t\t\t\t<div class=\"app-userprofile__centered__table--data\">Joined</div>\n\t\t\t\t\t<div class=\"app-userprofile__centered__table--data\">{{userProfile?.created_at | date : 'MMM yyyy'}}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</ng-container>\n","import { Component, Input, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ITweetUserProfile } from '../../service';\nimport { Logger } from '../../../../core/logger.service';\n\n@Component({\n  selector: 'app-userprofile',\n  templateUrl: './user-profile.component.html',\n  styleUrls: ['./user-profile.component.scss']\n})\nexport class UserprofileComponent implements OnInit {\n  @Input() \n  public userprofiledata: Observable<ITweetUserProfile> = null;\n\n  constructor(private logger: Logger) { }\n\n  ngOnInit(): void {\n    this.logger.debug(`UserprofileComponent`, `Input value ${this.userprofiledata}` );\n  }\n}\n","export * from './twitter-feed.interface';\nexport * from './twitter.service';\n","import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Observable, throwError, of } from 'rxjs';\nimport { catchError, retryWhen, take, concat, mergeMap } from 'rxjs/operators';\n\nimport { Logger } from '../logger.service';\n\n// const log = new Logger('ErrorHandlerInterceptor');\n\nexport class HttpResponseWithMessage extends HttpResponse<any> {\n  public message?: string;\n}\n/**\n * Adds a default error handler to all requests.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ErrorHandlerInterceptor implements HttpInterceptor {\n\n  public constructor(private _log: Logger) { }\n  \n  /**\n   * Intercept API error response\n   * @param  {HttpRequest<any>} request\n   * @param  {HttpHandler} next\n   * @returns Observable\n   */\n  public intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(request).pipe(\n      retryWhen(error => {\n        return error.pipe(\n          mergeMap((errorData: any) => {\n            // retry only if error status is 500\n            return errorData.status === 500 ? of(errorData) : throwError(errorData);\n          }),\n          take(2),\n          concat(throwError(error)));\n      }),\n      catchError((error) => this.errorHandler(error)));\n  }\n\n  /**\n   * Customize the default error handler here if needed\n   * @param response \n   * @returns handler \n   */\n  private errorHandler(response: HttpResponseWithMessage): Observable<HttpResponseWithMessage> {\n    const errormessage = `url: ${response.url} status: ${response.status} statusText: ${response.statusText} body: ${response.body}`;\n    this._log.error('API error', errormessage);\n    throw response;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule as AngularCommonModule } from '@angular/common';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { RouterModule } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\n\n\n\nimport { ButtonModule } from 'primeng/button';\nimport { RippleModule } from 'primeng/ripple';\nimport { TabViewModule } from 'primeng/tabview';\nimport {InputTextareaModule} from 'primeng/inputtextarea';\n\n\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { HeaderComponent } from './header/header.component';\nimport { LeftpaneComponent } from './leftpane/leftpane.component';\nimport { AppLoaderComponent } from './loader/loader.component';\nimport { LandingComponent } from './landing/landing.component';\n\nimport { CommonService } from './services/common.service';\n\nimport { LoaderService } from './loader/service/loader.service';\n\nimport {\n    MainComponent,\n    UserprofileComponent,\n    UserPostComponent,\n    UserFeedComponent\n} from '../feature/twitter/component';\n\nconst modules = [\n\n    ButtonModule,\n    RippleModule,\n    TabViewModule,\n    InputTextareaModule\n];\n@NgModule({\n    imports: [\n        AngularCommonModule,\n        RouterModule,\n        BrowserModule,\n        BrowserAnimationsModule,\n        FormsModule,\n        ...modules,\n    ],\n    declarations: [\n        AppLoaderComponent,\n        HeaderComponent,\n        LeftpaneComponent,\n        LandingComponent,\n        MainComponent,\n        UserprofileComponent,\n        UserPostComponent,\n        UserFeedComponent\n    ],\n    providers: [\n        CommonService,\n    ],\n    exports: [\n        AngularCommonModule,\n        RouterModule,\n        BrowserModule,\n        BrowserAnimationsModule,\n        FormsModule,\n        AppLoaderComponent,\n        HeaderComponent,\n        LeftpaneComponent,\n        LandingComponent,\n        ...modules,\n    ],\n})\nexport class SharedModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Logger } from './core/logger.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Twitter';\n}\n","<app-landing></app-landing>","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FeatureRoutingModule } from './feature-routing.module';\n\n\n@NgModule({\n  declarations: [ ],\n  imports: [\n    CommonModule,\n    FeatureRoutingModule\n  ],\n  exports: []\n})\nexport class FeatureModule { }\n","import { Component } from '@angular/core';\n/**\n *\n *\n * @export\n * @class LandingComponent\n */\n@Component({\n  selector: 'app-landing',\n  templateUrl: './landing.component.html',\n  styleUrls: ['./landing.component.css']\n})\nexport class LandingComponent{\n\n}\n","<div class=\"main_container\">\n    <app-header></app-header>\n    <router-outlet name=\"twitter-main\"></router-outlet>\n</div>\n<app-loader></app-loader>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { CoreModule } from './core/core.module';\nimport { SharedModule } from './shared/shared.module';\nimport { FeatureModule } from './feature/feature.module';\nimport { AppComponent } from './app.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    CommonModule,\n    BrowserModule,\n    AppRoutingModule,\n    CoreModule,\n    SharedModule,\n    FeatureModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","<ng-container *ngIf=\"(userFeedAsyncResult$ | async ) as userFeedAsyncResult\n  then userProfileTemplate;\n  else emptyTemplate\n\"></ng-container>\n\n\n<ng-template #userProfileTemplate>\n\n<div class=\"app-main\">\n\t<app-userprofile  [userprofiledata]=\"(userFeedAsyncResult$ | async)?.user\">\n\t</app-userprofile>\n\t<div class=\"app-main__centered\">\n\t\t<app-user-post [userheadlines]=\"(userFeedAsyncResult$ | async)?.getHeadLines\"\n\t\t[usertimelines]=\"(userFeedAsyncResult$ | async)?.getUserTimeLines\"\n\t\t[usermentionslines]=\"(userFeedAsyncResult$ | async)?.getMentionTimeLines\"\n\t\t></app-user-post>\n\t</div>\n</div>\n<router-outlet></router-outlet>\n</ng-template>\n\n<ng-template #emptyTemplate>\n\t<div class=\"app-main__empty-container\">\n\t\t Please configure the server settings to access Twitter API. Update below parameter in Server.js\n\t\t <ol>\n\t\t\t<li>consumer_key</li>\n\t\t\t<li>consumer_secret</li>\n\t\t\t<li>access_token</li>\n\t\t\t<li>access_token_secret</li>\n\t\t\t<li>bearer_token</li>\n\t\t  </ol>\n\t</div>\n  </ng-template>","import { Component, OnInit } from '@angular/core';\nimport { forkJoin, Observable, Subscription } from 'rxjs';\nimport { map, tap, catchError } from 'rxjs/operators';\nimport {\n    TwitterService,\n    ITweetUserProfile,\n    ITweetUserHeadlines,\n    ITweetResponse,\n} from '../../service';\nimport { Logger } from '../../../../core/logger.service';\n\n@Component({\n    selector: 'app-main',\n    templateUrl: './main.component.html',\n    styleUrls: ['./main.component.scss'],\n})\nexport class MainComponent implements OnInit {\n    public userProfileAsyncResult$: Observable<any>;\n    public userFeedAsyncResult$: Observable<any>;\n    public fileName = `MainComponent`;\n\n    constructor(\n        public twitterService: TwitterService,\n        public logger: Logger\n    ) {}\n\n    ngOnInit(): void {\n        this.userFeedAsyncResult$ = this.twitterData();\n        this.logger.debug(this.fileName, `userFeeddata`);\n        this.logger.debug(this.fileName, this.userFeedAsyncResult$);\n        // tslint:disable-next-line: deprecation\n    }\n    public twitterData(): Observable<any> {\n        // Observable.forkJoin (RxJS 5) changes to just forkJoin() in RxJS 6\n        return forkJoin([\n            this.twitterService.getUserProfile(),\n            this.twitterService.getHomeTimeLine(),\n            this.twitterService.getUserTimeLine(),\n            this.twitterService.getUserMentionsTimeLine(),\n        ]).pipe(\n            catchError(async (error) => this.onGetFeedError(error)),\n            map((result) => tranformResult(result))\n        );\n    }\n\n    onGetFeedError = (error): void => {\n        this.logger.debug(this.fileName, `onGetFeedError`);\n        this.logger.debug(this.fileName, error);\n    };\n}\n\nexport function tranformResult(result) {\n    console.log(`tranformResult`);\n    console.log(`MainComponent`, result);\n    const userData: ITweetUserProfile = result[0];\n    const getHeadLinesData: ITweetUserHeadlines[] = result[1];\n    const getUserTimeLinesData: ITweetUserHeadlines[] = result[2];\n    const getMentionTimeLinesData: ITweetUserHeadlines[] = result[3];\n    console.log({\n        user: userData,\n        getHeadLines: getHeadLinesData,\n        getUserTimeLines: getUserTimeLinesData,\n        getMentionTimeLines: getMentionTimeLinesData,\n    });\n    return {\n        user: userData,\n        getHeadLines: getHeadLinesData,\n        getUserTimeLines: getUserTimeLinesData,\n        getMentionTimeLines: getMentionTimeLinesData,\n    };\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../../environments/environment';\nimport { Logger } from '../../core/logger.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpRequestService {\n  private header: HttpHeaders = new HttpHeaders({ responseType: 'JSON' });\n\n  constructor(private http: HttpClient, private logger: Logger) {\n    this.logger.debug(`HttpRequestService`, environment.serverUrl);\n   }\n\n  /**\n   * Gets http request service\n   * @param url \n   * @param [header] \n   * @returns get \n   */\n  public get(path: string, header?: object): Observable<Object> {\n    this.logger.debug(`HttpRequestService`, `get`);\n    this.logger.debug(`HttpRequestService`, environment.serverUrl + path);\n    header = header ?? this.header;\n    const url = environment.serverUrl + path;\n    return this.http.get(url, header);\n  }\n\n  /**\n   * Posts http request service\n   * @param url \n   * @param body \n   * @param [header] \n   * @returns post \n   */\n  public post(path: string, body: object, header?: object): Observable<Object> {\n    this.logger.debug(`HttpRequestService`, `post`);\n    this.logger.debug(`HttpRequestService`, body);\n    this.logger.debug(`HttpRequestService`, environment.serverUrl + path);\n    header = header ?? this.header;\n    const url = environment.serverUrl + path;\n    return this.http.post(url, body, header);\n  }\n\n  /**\n   * Puts http request service\n   * @param url \n   * @param [body] \n   * @param [header] \n   * @returns put \n   */\n  public put(path: string, body?: object, header?: object): Observable<Object> {\n    header = header ?? this.header;\n    const url = environment.serverUrl + path;\n    return this.http.put(url, body, header);\n  }\n\n  /**\n   * Deletes http request service\n   * @param url \n   * @param [header] \n   * @param [requestBody] \n   * @returns delete \n   */\n  public delete(path: string, header?: object, requestBody?: object): Observable<Object> {\n    const options = {\n      headers: header === undefined ? this.header : new HttpHeaders(header as { [key: string]: string | string[] }),\n      body: requestBody,\n    };\n    const url = environment.serverUrl + path;\n    return this.http.request('delete', url, options);\n  }\n}\n","import { Injectable } from '@angular/core';\n\nexport enum LogLevel {\n  Off = 0,\n  Custom,\n  Error,\n  Warning,\n  Info,\n  Debug,\n}\n\n/**\n * Log output handler function.\n */\nexport type LogOutput = (source: string | undefined, level: LogLevel, ...objects: any[]) => void;\n\n\n@Injectable({\n  providedIn: 'root'\n})\n\n\nexport class Logger {\n  constructor() { }\n  /**\n   * Current logging level.\n   * Set it to LogLevel.Off to disable logs completely.\n   */\n  static level = LogLevel.Debug;\n\n  /**\n   * Additional log outputs.\n   */\n  static outputs: LogOutput[] = [];\n\n  /**\n   * Enables production mode.\n   * Sets logging level to LogLevel.Warning.\n   */\n  public enableProductionMode() {\n    Logger.level = LogLevel.Error;\n  }\n\n  /**\n   * Logs messages or objects  with the debug level.\n   * Works the same as console.log().\n   */\n  public debug(source: string, ...objects: any[]) {\n    this.log(source, console.log, LogLevel.Debug, objects);\n  }\n\n  /**\n   * Logs messages or objects  with the info level.\n   * Works the same as console.log().\n   */\n  public info(source: string, ...objects: any[]) {\n    // tslint:disable-next-line:no-console\n    this.log(source, console.info, LogLevel.Info, objects);\n  }\n\n  /**\n   * Logs messages or objects  with the warning level.\n   * Works the same as console.log().\n   */\n  public warn(source: string, ...objects: any[]) {\n    this.log(source, console.warn, LogLevel.Warning, objects);\n  }\n\n  /**\n   * Logs messages or objects  with the error level.\n   * Works the same as console.log().\n   */\n  public error(source: string, ...objects: any[]) {\n    this.log(source, console.error, LogLevel.Error, objects);\n  }\n\n  /**\n   * @function log\n   * @param source\n   * @param func\n   * @param level\n   * @param objects\n   * @description log messages and events\n   */\n  private log(source: string, func: (...args: any[]) => void, level: LogLevel, objects: any[]) {\n    const log = ['[' + source + '] ::'].concat(objects);\n    if (level <= Logger.level) {\n      func.apply(console, log);\n      Logger.outputs.forEach((output) => output.apply(output, [source, level, objects]));\n    }\n  }\n}","import { Component, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-leftpane',\n  templateUrl: './leftpane.component.html',\n  styleUrls: ['./leftpane.component.css']\n})\nexport class LeftpaneComponent {\n\n  public isSidebarActive: boolean = false;\n\n  @Output()\n  public changeToggleEvent = new EventEmitter<string>();\n\n  /**\n   * @function callToggle\n   * @description emit left pane expand/collapse\n   */\n  public callToggle() {\n    this.isSidebarActive = !this.isSidebarActive;\n    this.changeToggleEvent.emit();\n  }\n\n}\n","<div class=\"dashboard_box\"> \n    <div class=\"sidebar_block\">\n        <div class=\"sidebar_content\" *ngIf=\"isSidebarActive\">\n            Left pane for navigation\n        </div>        \n    </div>\n    <div class=\"collapse-icon\">\n        <span id=\"side-nav-toggle-icon\" class=\"toggle-icon glyphicon\" (click)=\"callToggle()\"></span>\n    </div>\n</div>\n\n","<div class=\"app-user-feed__row app-user-feed__wrapper\">\n\t<ng-container *ngFor=\"let feedData of userfeeddata; let i = index;\">\n\t\t<div class=\"app-user-feed__container\">\n\t\t\t<img class=\"app-user-feed__profile-img\" *ngIf=\"feedData.user.profile_image_url\"\n\t\t\t\t[src]=\"feedData.user.profile_image_url\">\n\t\t\t<div class=\"app-user-feed__user-cont\">\n\t\t\t\t<span *ngIf=\"feedData.user.name\" class=\"app-user-feed__name\"> {{feedData.user.name}}\n\t\t\t\t\t<span *ngIf=\"feedData.user.screen_name\" class=\"app-user-feed__screen-name\">@\n\t\t\t\t\t\t{{feedData.user.screen_name}}</span>\n\t\t\t\t\t\t<span *ngIf=\"feedData.user.created_at\"\n\t\t\t\t\t\tclass=\"app-user-feed__created-at\">{{feedData.user.created_at | date :'hh':'UTC'}} hrs</span>\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t<div class=\"app-user-feed__full-text\" [innerHtml]=\"this.sanitizeText(feedData.full_text)\"></div>\n\t\t\t<img *ngIf=\"feedData.user.profile_banner_url\" class=\"app-user-feed__banner\"\n\t\t\t\t[src]=\"feedData.user.profile_banner_url\">\n\t\t</div>\n\t</ng-container>\n</div>","import { Component, Input, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ITweetUserProfile } from '../../service';\nimport { Logger } from '../../../../core/logger.service';\nimport { DomSanitizer,  } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-user-feed',\n  templateUrl: './user-feed.component.html',\n  styleUrls: ['./user-feed.component.scss']\n})\nexport class UserFeedComponent implements OnInit {\n  @Input() \n  public userfeeddata: any = null;\n  public fullText: string;\n\n  constructor(private logger: Logger,protected sanitizer: DomSanitizer) { }\n\n  ngOnInit(): void {\n    this.logger.debug(`UserFeedComponent`, `Input value ${this.userfeeddata}` );\n  }\n\n  \n  sanitizeUrl(contentHtml: string){\n    const urlRegex = /(https?:\\/\\/[^ ]*)/;\n    const url = contentHtml.match(urlRegex) ? contentHtml.match(urlRegex)[1] : null;\n    return this.sanitizer.bypassSecurityTrustResourceUrl(url);\n  }\n  \n\n\n  sanitizeText(contentText: string){\n    const urlRegex = /(?:https?|ftp):\\/\\/[\\n\\S]+/g;\n    const text = contentText.replace(urlRegex, '');\n    return this.sanitizer.bypassSecurityTrustHtml(text) ? this.sanitizer.bypassSecurityTrustHtml(text) : null;\n  }\n\n}\n","<dls-layout-container id=\"loader-container\" *ngIf=\"isLoading | async\" class=\"loader-overlay\">\n  <div class=\"text-xs-center\">\n    <!-- <i class=\"fas fa-cog fa-spin fa-3x\"></i> <span>{{ message }}</span>  -->\n    <dls-progress-circular-indeterminate id=\"progress-loader\" class=\"loader\"></dls-progress-circular-indeterminate>\n  </div>\n</dls-layout-container>\n\n<!-- <div [hidden]=\"!isLoading\" class=\"text-xs-center\">\n  <i class=\"fas fa-cog fa-spin fa-3x\"></i> <span>{{ message }}</span>\n</div> -->\n  ","import { Component, Input } from '@angular/core';\nimport { LoaderService } from './service/loader.service';\nimport { Subject } from 'rxjs';\n\n/**\n *\n *\n * @export\n * @class AppLoaderComponent\n */\n@Component({\n  selector: 'app-loader',\n  templateUrl: './loader.component.html',\n  styleUrls: ['./loader.component.css'],\n})\nexport class AppLoaderComponent {\n  @Input()\n  public message: string | undefined;\n\n  public isLoading: Subject<boolean> = this.loaderService.isAppLoading;\n\n  /**\n   *Creates an instance of AppLoaderComponent.\n   * @param {LoaderService} loaderService\n   * @memberof AppLoaderComponent\n   */\n  public constructor(private loaderService: LoaderService) { }\n\n}\n","import { NgModule, Optional, SkipSelf } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { RouteReuseStrategy, RouterModule } from '@angular/router';\nimport { ApiPrefixInterceptor } from './http/api-prefix.interceptor';\nimport { ErrorHandlerInterceptor } from './http/error-handler.interceptor';\nimport { RouteReusableStrategy } from './route-reusable-strategy';\nimport { HttpRequestService } from './http/http-request.service';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule, HttpClientModule, RouterModule\n  ],\n  providers: [\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: ApiPrefixInterceptor,\n      multi: true\n    },\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: ErrorHandlerInterceptor,\n      multi: true,\n    },\n    {\n      provide: RouteReuseStrategy,\n      useClass: RouteReusableStrategy,\n    },\n    HttpRequestService\n  ],\n  exports: []\n})\nexport class CoreModule {\n  constructor(@Optional() @SkipSelf() parentModule: CoreModule) {\n    // Import guard\n    if (parentModule) {\n      throw new Error(`${parentModule} has already been loaded. Import Core module in the AppModule only.`);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { MainComponent } from './twitter/component';\n\nexport const routes: Routes = [\n  {\n    path: '',\n    component: MainComponent,\n    outlet: 'twitter-main'\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class FeatureRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","export * from './user-profile/user-profile.component';\nexport * from './user-post/user-post.component';\nexport * from './user-feed/user-feed.component';\nexport * from './main/main.component';\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n/**\n *\n *\n * @export\n * @class LoaderService\n */\n@Injectable()\nexport class LoaderService {\n\n  // public isCompLoading = new Subject<boolean>();\n  public isAppLoading = new Subject<boolean>();\n\n  /**\n   * @function showBlockLoader\n   * @description emit to show app loader\n   */\n  public showBlockLoader() {\n    this.isAppLoading.next(true);\n  }\n  /**\n   * @function hideBlockLoader\n   * @description emit to hide app loader\n   */\n  public hideBlockLoader() {\n    this.isAppLoading.next(false);\n  }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";","import { ActivatedRouteSnapshot, DetachedRouteHandle, RouteReuseStrategy } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { Logger } from './logger.service';\n\n/**\n * A route strategy allowing for explicit route reuse.\n * Used as a workaround for https://github.com/angular/angular/issues/18374\n * To reuse a given route, add `data: { reuse: true }` to the route definition.\n */\n@Injectable()\nexport class RouteReusableStrategy extends RouteReuseStrategy {\n\n  private fileName = 'route reusable';\n  public constructor( private _log: Logger) {\n    super();\n  }\n  public shouldDetach(route: ActivatedRouteSnapshot): boolean {\n    this._log.debug(this.fileName, route);\n    return false;\n  }\n\n  public store(route: ActivatedRouteSnapshot, detachedTree: DetachedRouteHandle | null): void {\n    this._log.debug(this.fileName, route);\n    this._log.debug(this.fileName, detachedTree);\n  }\n\n  public shouldAttach(route: ActivatedRouteSnapshot): boolean {\n    this._log.debug(this.fileName, route);\n    return false;\n  }\n\n  public retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle | null {\n    this._log.debug(this.fileName, route);\n    return null;\n  }\n\n  public shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {\n    this._log.debug(this.fileName, future);\n    this._log.debug(this.fileName, curr);\n    return future.routeConfig === curr.routeConfig || future.data.reuse;\n  }\n}\n"]}